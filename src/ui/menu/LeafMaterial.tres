[gd_resource type="ShaderMaterial" load_steps=27 format=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "Blur_Samples"

[sub_resource type="VisualShaderNodeScalarUniform" id=2]
uniform_name = "Blur_Radius"

[sub_resource type="VisualShaderNodeExpression" id=4]
size = Vector2( 979.92, 771.44 )
expression = "float scale = radius / (SAMPLES*2.0);

vec4 col = vec4(0.0);
float n = 0.0;
	
for(int x=-int(SAMPLES)/2; x < int(SAMPLES)/2; ++x) {
	for(int y=-int(SAMPLES)/2; y < int(SAMPLES)/2; ++y) {
		col += texture(TEXTURE, UV + scale * vec2(float(x), float(y)));
		n += 1.0;
	}
}

col /= n;

color = col.rgb;
alpha = col.a;"

[sub_resource type="VisualShaderNodeVectorCompose" id=5]

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
function = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=7]
function = 0

[sub_resource type="VisualShaderNodeVectorCompose" id=8]

[sub_resource type="VisualShaderNodeScalarFunc" id=21]
function = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=10]
function = 0

[sub_resource type="VisualShaderNodeScalarUniform" id=11]
uniform_name = "Wind_Force"

[sub_resource type="VisualShaderNodeScalarOp" id=12]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=22]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=15]
function = 0

[sub_resource type="VisualShaderNodeScalarUniform" id=16]
uniform_name = "Wind_Speed"

[sub_resource type="VisualShaderNodeScalarFunc" id=23]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=24]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=25]

[sub_resource type="VisualShaderNodeScalarOp" id=20]
default_input_values = [ 0, 0.0, 1, 2.3 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=26]
uniform_name = "Wind_Offset"

[sub_resource type="VisualShaderNodeScalarOp" id=27]

[sub_resource type="VisualShaderNodeScalarFunc" id=28]
function = 19

[sub_resource type="VisualShaderNodeInput" id=29]
input_name = "vertex"

[sub_resource type="VisualShaderNodeTransformVecMult" id=30]

[sub_resource type="VisualShaderNodeTransformCompose" id=31]
default_input_values = [ 0, Vector3( 1, 0, 0 ), 1, Vector3( 0, 1, 0 ), 2, Vector3( 0, 0, 0 ), 3, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShader" id=32]
resource_local_to_scene = true
code = "shader_type canvas_item;
uniform float Wind_Offset;
uniform float Wind_Speed;
uniform float Wind_Force;
uniform float Blur_Radius;
uniform float Blur_Samples;



void vertex() {
// Input:2
	float n_out2p0 = TIME;

// ScalarUniform:31
	float n_out31p0 = Wind_Offset;

// ScalarOp:32
	float n_out32p0 = n_out2p0 + n_out31p0;

// ScalarUniform:26
	float n_out26p0 = Wind_Speed;

// ScalarOp:24
	float n_out24p0 = n_out32p0 * n_out26p0;

// ScalarFunc:25
	float n_out25p0 = sin(n_out24p0);

// ScalarOp:30
	float n_in30p1 = 2.30000;
	float n_out30p0 = n_out26p0 * n_in30p1;

// ScalarOp:28
	float n_out28p0 = n_out32p0 * n_out30p0;

// ScalarFunc:27
	float n_out27p0 = sin(n_out28p0);

// ScalarOp:29
	float n_out29p0 = n_out25p0 + n_out27p0;

// ScalarUniform:18
	float n_out18p0 = Wind_Force;

// ScalarOp:19
	float n_out19p0 = n_out29p0 * n_out18p0;

// ScalarFunc:11
	float n_out11p0 = cos(n_out19p0);

// ScalarFunc:33
	float n_out33p0 = -(n_out19p0);

// ScalarFunc:12
	float n_out12p0 = sin(n_out33p0);

// VectorCompose:10
	float n_in10p2 = 0.00000;
	vec3 n_out10p0 = vec3(n_out11p0, n_out12p0, n_in10p2);

// ScalarFunc:16
	float n_out16p0 = sin(n_out19p0);

// ScalarFunc:15
	float n_out15p0 = cos(n_out19p0);

// VectorCompose:14
	float n_in14p2 = 0.00000;
	vec3 n_out14p0 = vec3(n_out16p0, n_out15p0, n_in14p2);

// TransformCompose:9
	vec3 n_in9p2 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in9p3 = vec3(0.00000, 0.00000, 0.00000);
	mat4 n_out9p0 = mat4(vec4(n_out10p0, 0.0), vec4(n_out14p0, 0.0), vec4(n_in9p2, 0.0), vec4(n_in9p3, 1.0));

// Input:5
	vec3 n_out5p0 = vec3(VERTEX, 0.0);

// TransformVectorMult:8
	vec3 n_out8p0 = (n_out9p0 * vec4(n_out5p0, 1.0)).xyz;

// Output:0
	VERTEX = n_out8p0.xy;

}

void fragment() {
// ScalarUniform:5
	float n_out5p0 = Blur_Radius;

// ScalarUniform:10
	float n_out10p0 = Blur_Samples;

// Expression:9
	vec3 n_out9p0;
	float n_out9p1;
	n_out9p0 = vec3(0.0, 0.0, 0.0);
	n_out9p1 = 0.0;
	{
		float scale = n_out5p0 / (n_out10p0*2.0);
		
		vec4 col = vec4(0.0);
		float n = 0.0;
			
		for(int x=-int(n_out10p0)/2; x < int(n_out10p0)/2; ++x) {
			for(int y=-int(n_out10p0)/2; y < int(n_out10p0)/2; ++y) {
				col += texture(TEXTURE, UV + scale * vec2(float(x), float(y)));
				n += 1.0;
			}
		}
		
		col /= n;
		
		n_out9p0 = col.rgb;
		n_out9p1 = col.a;
	}

// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out9p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -334.227, 382.875 )
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 520, 100 )
nodes/vertex/2/node = SubResource( 22 )
nodes/vertex/2/position = Vector2( -2020, -80 )
nodes/vertex/5/node = SubResource( 29 )
nodes/vertex/5/position = Vector2( 60, 160 )
nodes/vertex/8/node = SubResource( 30 )
nodes/vertex/8/position = Vector2( 260, 80 )
nodes/vertex/9/node = SubResource( 31 )
nodes/vertex/9/position = Vector2( 0, 20 )
nodes/vertex/10/node = SubResource( 5 )
nodes/vertex/10/position = Vector2( -220, -80 )
nodes/vertex/11/node = SubResource( 6 )
nodes/vertex/11/position = Vector2( -420, -120 )
nodes/vertex/12/node = SubResource( 7 )
nodes/vertex/12/position = Vector2( -420, -20 )
nodes/vertex/14/node = SubResource( 8 )
nodes/vertex/14/position = Vector2( -220, 120 )
nodes/vertex/15/node = SubResource( 21 )
nodes/vertex/15/position = Vector2( -420, 180 )
nodes/vertex/16/node = SubResource( 10 )
nodes/vertex/16/position = Vector2( -420, 80 )
nodes/vertex/18/node = SubResource( 11 )
nodes/vertex/18/position = Vector2( -980, 220 )
nodes/vertex/19/node = SubResource( 12 )
nodes/vertex/19/position = Vector2( -860, -40 )
nodes/vertex/24/node = SubResource( 14 )
nodes/vertex/24/position = Vector2( -1440, -40 )
nodes/vertex/25/node = SubResource( 15 )
nodes/vertex/25/position = Vector2( -1260, -20 )
nodes/vertex/26/node = SubResource( 16 )
nodes/vertex/26/position = Vector2( -1960, 160 )
nodes/vertex/27/node = SubResource( 23 )
nodes/vertex/27/position = Vector2( -1260, 100 )
nodes/vertex/28/node = SubResource( 24 )
nodes/vertex/28/position = Vector2( -1440, 80 )
nodes/vertex/29/node = SubResource( 25 )
nodes/vertex/29/position = Vector2( -1080, 0 )
nodes/vertex/30/node = SubResource( 20 )
nodes/vertex/30/position = Vector2( -1640, 180 )
nodes/vertex/31/node = SubResource( 26 )
nodes/vertex/31/position = Vector2( -1960, 100 )
nodes/vertex/32/node = SubResource( 27 )
nodes/vertex/32/position = Vector2( -1860, -100 )
nodes/vertex/33/node = SubResource( 28 )
nodes/vertex/33/position = Vector2( -600, -20 )
nodes/vertex/connections = PoolIntArray( 5, 0, 8, 1, 9, 0, 8, 0, 11, 0, 10, 0, 12, 0, 10, 1, 10, 0, 9, 0, 15, 0, 14, 1, 16, 0, 14, 0, 14, 0, 9, 1, 18, 0, 19, 1, 8, 0, 0, 0, 24, 0, 25, 0, 26, 0, 24, 1, 19, 0, 11, 0, 19, 0, 16, 0, 19, 0, 15, 0, 28, 0, 27, 0, 29, 0, 19, 0, 30, 0, 28, 1, 26, 0, 30, 0, 2, 0, 32, 0, 31, 0, 32, 1, 32, 0, 28, 0, 32, 0, 24, 0, 27, 0, 29, 1, 25, 0, 29, 0, 19, 0, 33, 0, 33, 0, 12, 0 )
nodes/fragment/0/position = Vector2( 940, 480 )
nodes/fragment/5/node = SubResource( 2 )
nodes/fragment/5/position = Vector2( -300, 480 )
nodes/fragment/9/node = SubResource( 4 )
nodes/fragment/9/position = Vector2( -80, 440 )
nodes/fragment/9/size = Vector2( 979.92, 771.44 )
nodes/fragment/9/input_ports = "0,0,radius;1,0,SAMPLES;"
nodes/fragment/9/output_ports = "0,1,color;1,0,alpha;"
nodes/fragment/9/expression = "float scale = radius / (SAMPLES*2.0);

vec4 col = vec4(0.0);
float n = 0.0;
	
for(int x=-int(SAMPLES)/2; x < int(SAMPLES)/2; ++x) {
	for(int y=-int(SAMPLES)/2; y < int(SAMPLES)/2; ++y) {
		col += texture(TEXTURE, UV + scale * vec2(float(x), float(y)));
		n += 1.0;
	}
}

col /= n;

color = col.rgb;
alpha = col.a;"
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -300, 540 )
nodes/fragment/connections = PoolIntArray( 9, 1, 0, 1, 9, 0, 0, 0, 5, 0, 9, 0, 10, 0, 9, 1 )

[resource]
resource_local_to_scene = true
shader = SubResource( 32 )
shader_param/Wind_Offset = null
shader_param/Wind_Speed = 1.0
shader_param/Wind_Force = 0.2
shader_param/Blur_Radius = 0.0
shader_param/Blur_Samples = 8.0
